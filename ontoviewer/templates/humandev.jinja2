{% extends "layout.jinja2" %}


{% block  more_scripts %}
	<script src="{{request.static_url('ontoviewer:static/d3.js')}}"></script>	
 	<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
	  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

{% endblock  more_scripts %}

  {% block more_links %}   
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">

	<style>
.intro {text-align: center; margin: 10px 30px 50px 30px;}


.node circle {
  cursor: pointer;
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font-size: 12px;
}

path.link {
  fill: none;
  stroke: #ECECEC;
  stroke-width: 1px;
}

.ext-link {
  font-weight: bold;
}

    </style>


  {% endblock %}

{% block content %}


<div class="intro">
<div style="margin-top: -10px;margin-bottom:15px">
<a href="/" style="color:#303030;text-transform:uppercase;font-size:11px;"><i class="fas fa-caret-left"></i> Back to homepage</a>
</div>
<h1>Human development - anatomic evolution</h1>
<p>Click on the circles to follow the evolution of anatomical elements. Click on the labels to view information about this item in the cell ontology. </p>

</div>

  <div id="body" style="margin:20px">

    <script type="text/javascript">


	
	var xmlhttp = new XMLHttpRequest();
	xmlhttp.onreadystatechange = function() {
	if (this.readyState == 4 && this.status == 200) {

	
	
	var m = [0, 20, 40, 20],
    w = 2400 - m[1] - m[3],
    h = 1400 - m[0] - m[2],
    i = 0,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#body").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  	.append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

var root = JSON.parse(this.responseText);

  root.x0 = (h / 2);
  root.y0 = 0;

  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  root.children.forEach(toggleAll);
  update(root);
  
  
  

function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 240; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  // add a link to the concept
  var a = nodeEnter.append("a")
	  .attr("xlink:href", function(d){ return d.uri; })
	  .attr("target", "_blank");
  
  a.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? 10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "start" : "start" ; })
      .text(function(d) { return (d.name != null)?d.name:d.uri ; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 8)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-8);

  nodeExit.select("text")
      .style("fill-opacity", 1e-8);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children.
function toggle(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
}
  
  }

	};


	xmlhttp.open("GET",
	"{{request.static_url('ontoviewer:static/humandev_tree.json')}}", true);
	xmlhttp.send();




    </script>
	
</div>
    
	<br />
<div style="width:100%">

<div style="text-align:center"><a href="/" style="color:#303030;text-transform:uppercase;font-size:10px"><i class="fas fa-caret-left"></i> Back to homepage</a></div>
</div>
	
    <script>
        $(document).ready(function () {
          // add external link behavior to every external link
          $('text').mouseover(function() {
            $(this).attr("class", "ext-link");
          });
          $('text').mouseout(function() {
            $(this).attr("class", "");
          });
          
        });         
    </script>
  

	

{% endblock content %}

